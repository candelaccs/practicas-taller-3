program ejercicio1; 
type

 str27 = string [27];
 redad = 12..100;
 
 socio = record
  numero: integer;
  nombre: str27;
  edad: redad;
 end;
 
 arbol = ^nodo;
 nodo = record
  dato: socio;
  HI: arbol;
  HD: arbol;
 end;
 
 
procedure crearArbol (var a: arbol);
 
 procedure leer (var s: socio);
 begin
  
  writeln ('ingresar numero de socio');
  readln (s.numero);
  if (s.numero <> 0 ) then begin
   writeln ('íngresar un nombre');
   readln (s.nombre);
   writeln ('ingresar edad');
   readln (s.edad);
  end;
 end; 
 
 procedure agregar (var a: arbol; s:socio);
 begin

  if (a = nil) then begin // si el arbol-raiz esta vacio entonces pongo el 1er elemento //
   new (a);
   a^.dato:= s; // cargo primer dato //
   a^.HI:= nil; // pongo hijo izquierdo en nil para dejarlo preparado y que luego pueda recibir un dato //
   a^.HD:= nil; // lo mismo //
  end
  else 
   if (s.numero <= a^.dato.numero) then
    agregar (a^.HI, s)
   else 
    agregar (a^.HD, s);
 end;               
var 
 s: socio;
begin // no deberia ser de forma recursiva esto? // ACTUALIZACION: no es necesario que sea recursivo a no ser que me lo pidan, se sigue usando la manera normal //
 a:= nil;
 leer(s);
 while (s.numero <> 0) do begin
  agregar (a, s);
  leer (s);
 end;
end; 
 
procedure informarMaximo (a: arbol); // es necesario hacer este procedimiento? //

 function maximo (a:arbol): integer;
 begin
  
  if (a = nil) then
   maximo:= -1
  else
   if (a^.HD = nil) then
    maximo:= a^.dato.numero
   else
    maximo (a^.HD);
 end;
 
var
 max: integer;
begin
  max:= maximo (a);
  if (max = -1) then
   writeln ('la lista esta vacia')
  else
   writeln ('el numero de socio maximo es', max);
end;
   
procedure informarMinimo (a:arbol);
 
 function minimoNodo (a:arbol): arbol;
 begin
  if (a = nil) then
   minimoNodo:= nil ;// es lo mismo :=a o :=nil;? // 
  if (a^.HI = nil) then
    minimoNodo:= a
  else 
    minimoNodo:= (a^.HI);
 end; 
var 
 min: arbol;
begin
 // en esta parte se podria poner directamene while min <> nil) //
 min:= minimoNodo (a);
 if (min = nil) then
  writeln ('la lista esta vacia')
 else begin
  writeln ('los datos del numero de socio mas chico son:  ');
  writeln ('el nombre es ', min^.dato.nombre);
  writeln ('la edad es ', min^.dato.edad);
  writeln ('el numero de socio es ', min^.dato.numero);
 end;
end;
  
procedure informarMayorEdad (a:arbol);
 
 procedure maxmayor (var maxedad, maxnumsocio: integer; edad, numsocio: integer);
 begin
  if (edad > maxedad) then begin
    maxedad:= edad;
    maxnumsocio:= numsocio;
   end;
 end;
 procedure edadMayor (a:arbol; var maxnumsocio, maxedad: integer);
 begin
  if (a <> nil) then begin
   edadMayor (a^.HI, maxnumsocio, maxedad);
   maxmayor (maxedad, maxnumsocio, a^.dato.edad, a^.dato.numero);
   edadMayor (a^.HD, maxnumsocio,maxedad);
  end;
 end;
var
 maxnumsocio, maxedad: integer;
begin
 maxedad:= -1;
 maxnumsocio:= -1;
 edadMayor (a, maxnumsocio, maxedad);
 writeln ('el numero de socio con mayor edad es ', maxnumsocio);
end;       
    
procedure aumentarEdad (a: arbol) ;  // no es por referencia, averiguar por qué //
begin
  if (a <> nil) then begin
   a^.dato.edad:= a^.dato.edad + 1;
   aumentarEdad (a^.HI);
   aumentarEdad (a^.HD);
  end;
end;

procedure existeSocio (a: arbol);

 function existencia (a: arbol; num:integer): boolean;
 begin
  if (a = nil) then
   existencia:= false
 else
  if (a^.dato.numero = num) then
   existencia:= true
  else
   if (a^.dato.numero < num) then
    existencia (a^.HI, num)
   else
    existencia (a^.HD, num);
 end;
var
 num: integer;
begin
 writeln ('ingrese un valor a buscar');
 readln (num);
 
 if (existencia (a, num)) then
  writeln ('existe un socio con ese numero')
 else
  writeln ('no existe un socio con ese numero');
end;
    
procedure existeNombre (a: arbol);

 function existe (a: arbol; nombre: str27): boolean;
 begin
  if (a = nil) then
   existe:= false
  else
    if (a^.dato.nombre = nombre) then
      existe:= true
    else
     existeNombre (a^.HI);
     existeNombre (a^.HD);
 end;
var
 nombre: str27;
begin

 writeln ('ingrese un nombre a buscar');
 readln (nombre);
 
 if (existe (a,nombre)) then
  writeln ('existe un socio con ese nombre')
 else
  writeln ('no existe un socio con ese nombre');
  
end;
 
function contar (a: arbol; cont: real): real;
begin
  if (a <> nil) then begin
   cont:= cont+1;
   contar (a^.HI, cont);
   contar (a^.HD, cont);
  end; 
end; 
 
procedure informarCantidadSocios (a: arbol);
var
 cont: integer;
begin
 cont:= 0;
 writeln ('la cantidad de socios es', contar (a, cont));
end;
 
procedure informarPromedio (a: arbol);
 
 function sumar  (a: arbol; suma: real): real;
 begin
  if (a <> nil) then begin
   suma:= suma + a^.dato.edad;
   sumar (a^.HI, suma);
   sumar (a^.HD, suma);
  end;
 end;
var
 suma, cont, prom: real;
begin
 cont:= 0;
 suma:= 0;
 suma:= sumar(a, suma);
 cont:= contar (a, cont);
 
 prom:= suma/cont;
 
 writeln ('la edad promedio de los socios es', prom );
 
end;
 
procedure informarCreciente (a: arbol);
begin
 if (a <> nil) then begin
  informarCreciente (a^.HI);
  writeln ('numero de socio: ', a^.dato.numero);
  informarCreciente (a^.HD);
 end;
end;

procedure informarDecreciente (a: arbol);
begin
 if (a <> nil) then begin
  informarDecreciente (a^.HD);
  writeln ('numero de socio: ', a^.dato.numero);
  informarDecreciente (a^.HI);
 end;
end;

var
 a: arbol;
 
begin

 crearArbol (a); // se carga el arbol //
 
 informarMaximo (a); //informo valor maximo //
 informarMinimo (a); // informo nodo de minimo //
 
 informarMayorEdad (a); // informo (si  existe) el numero de socio con mayor edad //
 
 aumentarEdad (a); // aumenta en un año la edad de todo //
 
 existeSocio (a); // se ingresa un numero de socio y se verifia si existe o no //
 existeNombre (a); // se ingresa un nombre y se verifica si existe un socio con ese nombre o no //
 
 informarCantidadSocios (a); // cuenta todos los nodos //
 
 informarPromedio (a); // informa la edad promedio de los socios //
 
 informarCreciente (a); // informa numero de socios en orden creciente
 informarDecreciente (a); // informa numero de socio en orden decreciente //
 
end. 
